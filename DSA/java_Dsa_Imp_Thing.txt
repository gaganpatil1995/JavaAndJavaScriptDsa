Java imp things ;


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
input code for java 

import java.io.*;
import java.util.*;
import java.util.stream.*;
import static java.util.stream.Collectors.toList;


public class Main {
    
	public static void subset(int n ,List<Integer> list) {
   	 
    	}
    
    
	public static void main(String[] args) throws IOException {
   	 
    	BufferedReader bufferedReader = new BufferedReader(new   InputStreamReader(System.in));
   	 
    	int q = Integer.parseInt(bufferedReader.readLine().trim());
   	    try {
         	List<Integer> A = Stream.of(bufferedReader.readLine().trim().split(" "))
                           	.map(Integer::parseInt)
                           	.collect(Collectors.toList());  
           	 
         	subset(q,A);   
           	 
        	} catch (IOException ex) {
            	throw new RuntimeException(ex);
        	}
   	 
    	bufferedReader.close();
	}
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


import java.io.*;
import java.util.*;
import java.util.stream.*;
import static java.util.stream.Collectors.toList;


public class Main {
    
	public static void subset(int n ,List<Integer> list) {
   	 
    	}
    
    
	public static void main(String[] args) throws IOException {
   	 
    	BufferedReader bufferedReader = new BufferedReader(new   InputStreamReader(System.in));
   	 
    	int n = Integer.parseInt(bufferedReader.readLine().trim());
   	    try {
         	String[] strArr = bf.readLine().trim().split(" ");

    	int[] arr = Arrays.stream(strArr).mapToInt(Integer::parseInt).toArray();
           	 
         	subset(arr,n);   
           	 
        	} catch (IOException ex) {
            	throw new RuntimeException(ex);
        	}
   	 
    	bufferedReader.close();
	}
}

String[] strArr = bf.readLine().trim().split(" ");

    	int[] intArr = Arrays.stream(strArr).mapToInt(Integer::parseInt).toArray();
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import java.io.*;
import java.util.*;
import java.util.stream.*;
import static java.util.stream.Collectors.toList;


public class Main {
    
	public static void subFunc(int[]arr,int n) {
   	 
    	}
    
    
	public static void main(String[] args) throws IOException {
   	 
    	BufferedReader bf = new BufferedReader(new   InputStreamReader(System.in));
   	 
    	int tc = Integer.parseInt(bf.readLine().trim());
   	    try {
    while(tc-- !=0){

   int n = Integer.parseInt(bf.readLine().trim());
    	int[] arr = Arrays.stream(bf.readLine().trim().split(" ")) 
                               .mapToInt(Integer::parseInt).toArray();
           	 
         	subFunc(arr,n);  
} 
           	 
        	} catch (IOException ex) {
            	throw new RuntimeException(ex);
        	}
   	 
    	bf.close();
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double sum = m.stream()
    .mapToDouble(a -> a)
    .sum();

System.out.println(sum); 



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
To Add some Character in String 
String str = "alfaman"
if i want to change 2nd a with b then
str = str.substring(0, 3) + 'b' + str.substring(3+1);
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

to Add something in array 
int[] arr = new int[5] ;
for(int i=0 ;i<5 ;i++) arr[i] = Given number ;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

to get any anychar of given index 
String char = str.chartAt(3)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
to sort the Array ;
int [] arr ;
 Arrays.sort(arr) ;
System.out.println(arr)// it will give you sorted array ;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
to change element in arrayList 



// Custom input elements
      list.add("A");
      list.add("B");
      list.add("C");
      list.add("D");
 
      // Print all the elements added in the above object
      System.out.println(list);
 
      // 2 is the index of the element "C".
      //"C" will be replaced by "E"
      list.set(2, "E");

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Sorting ArrayList in ascending Order   
Collections.sort(list);   
 
      // Printing the newly updated List


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Integer Infinity :

  Integer maxNumber = Integer.MAX_VALUE

 Integer min =  Integer.MIN_VALUE ;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
conversion of int array into String array  
   // input primitive integer array

        int[] intArray = { 1, 2, 3, 4, 5 };
 
        String[] strArray = Arrays.stream(intArray)
                                .mapToObj(String::valueOf)
                                .toArray(String[]::new);
 
        System.out.println(Arrays.toString(strArray));

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
how to take power in java 
n ka power 0.5
double s = Math.pow(n, 0.5);

n ka power 2 
double s = Math.pow(n, 2);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
this is how to use stack in java ;
  	Stack<Integer> stk = new Stack() ;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
if every thing is right and it showing time limit exceded and there are loops which is very essential for problem the instead of string use string builder
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Sorting HashMap---

public static HashMap<String, Integer> sortByValue(HashMap<String, Integer> hm)
    {
        // Create a list from elements of HashMap
        List<Map.Entry<String, Integer> > list =
               new LinkedList<Map.Entry<String, Integer> >(hm.entrySet());
 
        // Sort the list
        Collections.sort(list, new Comparator<Map.Entry<String, Integer> >() {
            public int compare(Map.Entry<String, Integer> o1,
                               Map.Entry<String, Integer> o2)
            {
                return (o1.getValue()).compareTo(o2.getValue());
            }
        });
         
        // put data from sorted list to hashmap
        HashMap<String, Integer> temp = new LinkedHashMap<String, Integer>();
        for (Map.Entry<String, Integer> aa : list) {
            temp.put(aa.getKey(), aa.getValue());
        }
        return temp;
    }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
